def calcular_utilidad_esperada(eventos, utilidades, decision):
    """
    Calcula la utilidad esperada de una decisión dada.
    - eventos: diccionario con eventos y sus probabilidades. Ej: {"lluvia":0.3, "sol":0.7}
    - utilidades: diccionario con utilidades para cada decisión en cada evento.
                  Ej: {"llevar": {"lluvia": 50, "sol": -10}, "no_llevar": {"lluvia": -100, "sol": 20}}
    - decision: la decisión a evaluar (ej: "llevar" o "no_llevar")
    """
    return sum(prob * utilidades[decision][evento] for evento, prob in eventos.items())


def mejor_decision_sin_info(eventos, utilidades):
    """
    Encuentra la mejor decisión cuando solo tenemos probabilidades (sin información perfecta).
    Devuelve la mejor decisión y su utilidad esperada.
    """
    resultados = {decision: calcular_utilidad_esperada(eventos, utilidades, decision)
                  for decision in utilidades.keys()}
    mejor_decision = max(resultados, key=resultados.get)
    return mejor_decision, resultados[mejor_decision], resultados


def utilidad_con_info_perfecta(eventos, utilidades):
    """
    Calcula la utilidad esperada con información perfecta.
    Es decir: en cada evento se elige siempre la mejor decisión posible.
    """
    utilidad_total = 0
    for evento, prob in eventos.items():
        # Para cada evento, elegimos la mejor utilidad
        mejores_utilidades = [utilidades[decision][evento] for decision in utilidades.keys()]
        mejor = max(mejores_utilidades)
        utilidad_total += prob * mejor
    return utilidad_total


def valor_informacion(eventos, utilidades):
    """
    Calcula el valor de la información perfecta (VPI).
    """
    mejor_dec, utilidad_sin_info, todas = mejor_decision_sin_info(eventos, utilidades)
    utilidad_con_info = utilidad_con_info_perfecta(eventos, utilidades)
    valor = utilidad_con_info - utilidad_sin_info
    return mejor_dec, utilidad_sin_info, utilidad_con_info, valor, todas


# -------------------- EJEMPLO PRÁCTICO --------------------

# Escenario: ¿llevar paraguas o no?
eventos = {"lluvia": 0.3, "sol": 0.7}

utilidades = {
    "llevar": {"lluvia": 50, "sol": -10},
    "no_llevar": {"lluvia": -100, "sol": 20}
}

# Cálculo del valor de la información
mejor_dec, u_sin, u_con, vpi, todas = valor_informacion(eventos, utilidades)

print("=== Análisis de Decisión: El dilema del Paraguas ===\n")
print("Probabilidades de los eventos:")
for evento, prob in eventos.items():
    print(f"  - {evento}: {prob*100:.1f}%")

print("\nUtilidades de cada decisión según el evento:")
for decision, tabla in utilidades.items():
    print(f"  Decisión: {decision}")
    for evento, valor in tabla.items():
        print(f"    Si {evento}: {valor}")

print("\nUtilidades esperadas de cada decisión (sin información perfecta):")
for decision, valor in todas.items():
    print(f"  {decision}: {valor:.2f}")

print(f"\nMejor decisión sin información perfecta: '{mejor_dec}' con utilidad esperada {u_sin:.2f}")
print(f"Utilidad esperada con información perfecta: {u_con:.2f}")
print(f"Valor de la información perfecta: {vpi:.2f}")

if vpi > 0:
    print(f"\nInterpretación: Estar 100% seguro del clima valdría hasta {vpi:.2f} unidades (dinero, esfuerzo o comodidad).")
else:
    print("\nInterpretación: La información adicional no aporta valor en este escenario.")
