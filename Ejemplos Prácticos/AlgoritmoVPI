
# ===================== BASE DE CONOCIMIENTO =====================
# Aquí se definen los hechos y utilidades conocidas del sistema
eventos = {"lluvia": 0.3, "sol": 0.7}  # Probabilidades de los eventos
utilidades = {
    "llevar": {"lluvia": 50, "sol": -10},
    "no_llevar": {"lluvia": -100, "sol": 20}
}

# ===================== MOTOR DE INFERENCIA =====================
# Funciones que procesan la base de conocimiento para inferir conclusiones
def calcular_utilidad_esperada(eventos, utilidades, decision):
    """
    Calcula la utilidad esperada de una decisión dada.
    """
    return sum(prob * utilidades[decision][evento] for evento, prob in eventos.items())

def mejor_decision_sin_info(eventos, utilidades):
    """
    Encuentra la mejor decisión cuando solo tenemos probabilidades (sin información perfecta).
    """
    resultados = {decision: calcular_utilidad_esperada(eventos, utilidades, decision)
                  for decision in utilidades.keys()}
    mejor_decision = max(resultados, key=resultados.get)
    return mejor_decision, resultados[mejor_decision], resultados

def utilidad_con_info_perfecta(eventos, utilidades):
    """
    Calcula la utilidad esperada con información perfecta.
    """
    utilidad_total = 0
    for evento, prob in eventos.items():
        mejores_utilidades = [utilidades[decision][evento] for decision in utilidades.keys()]
        mejor = max(mejores_utilidades)
        utilidad_total += prob * mejor
    return utilidad_total

def valor_informacion(eventos, utilidades):
    """
    Calcula el valor de la información perfecta (VPI).
    """
    mejor_dec, utilidad_sin_info, todas = mejor_decision_sin_info(eventos, utilidades)
    utilidad_con_info = utilidad_con_info_perfecta(eventos, utilidades)
    valor = utilidad_con_info - utilidad_sin_info
    return mejor_dec, utilidad_sin_info, utilidad_con_info, valor, todas


# ===================== MÓDULO DE ADQUISICIÓN DE CONOCIMIENTO =====================
def adquirir_conocimiento():
    """
    Permite al usuario ingresar nuevos eventos y utilidades para las decisiones.
    Devuelve dos diccionarios: eventos y utilidades.
    """
    print("\n--- Módulo de Adquisición de Conocimiento ---")
    eventos = {}
    utilidades = {}

    n_eventos = int(input("¿Cuántos eventos posibles hay? "))
    for _ in range(n_eventos):
        nombre = input("Nombre del evento: ")
        prob = float(input(f"Probabilidad de '{nombre}': "))
        eventos[nombre] = prob

    n_decisiones = int(input("¿Cuántas decisiones posibles hay? "))
    for _ in range(n_decisiones):
        dec = input("Nombre de la decisión: ")
        utilidades[dec] = {}
        for evento in eventos:
            valor = float(input(f"Utilidad de '{dec}' si ocurre '{evento}': "))
            utilidades[dec][evento] = valor

    return eventos, utilidades

# ===================== INTERFAZ DE USUARIO =====================
# Presenta los resultados y explicaciones al usuario
def mostrar_resultados(eventos, utilidades, mejor_dec, u_sin, u_con, vpi, todas):
    print("=== Análisis de Decisión: El dilema del Paraguas ===\n")
    print("Probabilidades de los eventos:")
    for evento, prob in eventos.items():
        print(f"  - {evento}: {prob*100:.1f}%")

    print("\nUtilidades de cada decisión según el evento:")
    for decision, tabla in utilidades.items():
        print(f"  Decisión: {decision}")
        for evento, valor in tabla.items():
            print(f"    Si {evento}: {valor}")

    print("\nUtilidades esperadas de cada decisión (sin información perfecta):")
    for decision, valor in todas.items():
        print(f"  {decision}: {valor:.2f}")

    print(f"\nMejor decisión sin información perfecta: '{mejor_dec}' con utilidad esperada {u_sin:.2f}")
    print(f"Utilidad esperada con información perfecta: {u_con:.2f}")
    print(f"Valor de la información perfecta: {vpi:.2f}")

    if vpi > 0:
        print(f"\nInterpretación: Estar 100% seguro del clima valdría hasta {vpi:.2f} unidades (dinero, esfuerzo o comodidad).")
    else:
        print("\nInterpretación: La información adicional no aporta valor en este escenario.")

# ===================== PROGRAMA PRINCIPAL =====================
if __name__ == "__main__":
    print("¿Desea ingresar una nueva base de conocimiento? (s/n)")
    resp = input().strip().lower()
    if resp == 's':
        eventos_usuario, utilidades_usuario = adquirir_conocimiento()
        mejor_dec, u_sin, u_con, vpi, todas = valor_informacion(eventos_usuario, utilidades_usuario)
        mostrar_resultados(eventos_usuario, utilidades_usuario, mejor_dec, u_sin, u_con, vpi, todas)
    else:
        mejor_dec, u_sin, u_con, vpi, todas = valor_informacion(eventos, utilidades)
        mostrar_resultados(eventos, utilidades, mejor_dec, u_sin, u_con, vpi, todas)
